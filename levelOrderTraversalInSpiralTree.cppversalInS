/*
Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function would be added by GfG's Online Judge.*/


/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node
{
    int data;
    Node* left;
    Node* right;
}; */
void printSpiral(Node *root)
{
     if(root==NULL)
     return;
     int count,n;
     struct  Node*ptr,*ptr1;
     queue<struct  Node*>q;
     q.push(root);
     vector<struct Node*>vec;
     vec.push_back(root);
     count=1;
     while(q.empty()!=1)
     {
         n=q.size();
         while(n--)
         {
             ptr=q.front();
             q.pop();
             //cout<<ptr->data<<endl;
             if(count%2==0)
             cout<<ptr->data<<" ";
        else
             cout<<vec[n]->data<<" ";
            if(ptr->left!=NULL)
            {
                 q.push(ptr->left);
                 if(count%2==0)   
                 vec.push_back(ptr->left);
            }
             if(ptr->right!=NULL)
             {
                 q.push(ptr->right);
                 if(count%2==0)  
                  vec.push_back(ptr->right);
             }
         }
        // s.clear();
        if(count%2==1)
        vec.clear();
         count++;
     }
     
}
